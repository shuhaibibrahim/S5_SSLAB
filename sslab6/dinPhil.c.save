#include <stdio.h> 
#include <pthread.h> 
#include <semaphore.h> 
#include <unistd.h> 
#define SIZE 5

sem_t chopstick[5]; 

int number=10;
  
void * philosopher(void * arg)
{
    int * i=(int *)arg;
    while(number>=0)
    {
        printf("Philosopher %d is Hungry\n\n",*i+1);
        sem_wait(&chopstick[*i]);
        sem_wait(&chopstick[(*i+1)%5]);
        
            printf("Philosopher %d is eating\n",*i+1);
            
        sem_post(&chopstick[*i]);
        sem_post(&chopstick[(*i+1)%5]);
        printf("Philosopher %d is thinking\n\n",*i+1);
        number--;
        sleep(1);
    }
}
  
  
int main() 
{ 
    
    //initialsing chopstick semaphores
    for(int i=0;i<5;i++)
        sem_init(&chopstick[i], 0, 1); 

    pthread_t t[5]; //philosopher threads
    
    //creating philosopher threads
    // for(int i=0;i<5;i++)
    //     pthread_create(&(t[i]),NULL,philosopher,&i)2d;
    int p1=0,p2=1,p3=2,p4=3,p5=4;
    pthread_create(&(t[0]),NULL,philosopher,&p1);
    pthread_create(&(t[1]),NULL,philosopher,&p2);
    pthread_create(&(t[2]),NULL,philosopher,&p3);
    pthread_create(&(t[3]),NULL,philosopher,&p4);
    pthread_create(&(t[4]),NULL,philosopher,&p5);        
    for(int i=0;i<5;i++)
        pthread_join(t[i],NULL); 

    for(int i=0;i<5;i++)
        sem_destroy(&chopstick[i]); 
    return 0; 
} 



